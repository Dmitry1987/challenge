name: builds

on:
  push:
    branches: ["**"]
  pull_request:
    # adding this in order to activate the 'ready_for_review' event, which is not triggered by default
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
  # need this for manual run to make a ':debug' type of distroless container, in case will need to redeploy and debug in shell
  workflow_dispatch:
    inputs:
      image-type:
        description: Chose debug, for making debug type image
        default: 'nonroot'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    if: (! github.event.pull_request.draft)
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: xperimnt
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate docker tags
        id: build-metadata
        uses: docker/metadata-action@v5.5.1
        with:
          context: workflow
          images: xperimnt/webserver
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short
          labels: | 
            org.opencontainers.image.title=${GITHUB_REPOSITORY}
            org.opencontainers.image.description='A webserver'
            org.opencontainers.image.version=${GITHUB_SHA}
            org.opencontainers.image.created={{date 'yyyy-MM-dd'}}
            maintainer=Dmitry1987
            github.repository=${GITHUB_REPOSITORY}
            github.sha=${GITHUB_SHA}
            github.ref=${GITHUB_REF}

      # verify that path context works correctly and files are not discarded if we use this action instead of cli
      - name: Write custom data to image
        run: |
          echo '{ "version": "${GITHUB_SHA}" }' > challenge-1/file-from-ci

      - name: Build and push image to dockerhub
        id: push-image
        uses: docker/build-push-action@v6.9.0
        with:
          context: challenge-1
          file: ./challenge-1/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          build-args: ${{ inputs.image-type }}
          tags: ${{ steps.build-metadata.outputs.tags }}
          labels: ${{ steps.build-metadata.outputs.labels }}

      - name: Test with dive
        id: dive-test
        run: |
          # It would be better to run dive binary from our custom ec2 runner, and record the exit code,
          # because this can also fail for other docker reasons and exit code will be as if the test suite failed, 
          # but for sake of challenge, the short way :)

          # just to silence the noise of pull during docker run
          docker pull -q wagoodman/dive:latest 

          # something very not secure which we should never do irl (pulling someone's "latest" image, just mirror it to our ECR or better rebuild from our git repo into our ECR)
          sudo docker run --name ${GITHUB_SHA} --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v $(pwd)/challenge-1/.dive-ci:/config.yaml \
          wagoodman/dive:latest --config /config.yaml \
          xperimnt/webserver@${{ steps.push-image.outputs.digest }}

          if [ $? -eq 0 ]; then
            echo "dive_status=passed" >> $GITHUB_OUTPUT
          else
            echo "dive_status=failed" >> $GITHUB_OUTPUT
          fi


      # now, I know it's useless in terms of the dive test specifically, but let's say it was another testing suite that failed,
      # so we conditionally do something else afterwards
      - name: If dive has failed, build a debug image
        if: ${{ steps.dive-test.outputs.dive_status == 'failed' }}
        uses: docker/build-push-action@v6.9.0
        with:
          context: challenge-1
          file: ./challenge-1/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          # hardcoding the debug here
          build-args: debug
          tags: debug-${{github.sha}}
          labels: ${{ steps.build-metadata.outputs.labels }}
